// let arr1 = [1, 2, 3];
// let arr2 = arr1;
// console.log(arr2);

// arr1[0] = 10;
// // arr1 = [10, 20];
// console.log(arr2);   //arr1을 바꾸면 항상 arr2값이 따라감

// let value1 = 10;
// let value2 = value1;

// console.log(value2);

// value1 = 20;

// console.log(value1);
// console.log(value2);


// 배열의 특징
// 1. 배열은 빈 배열로 생성하거나 요소가 포함된 배열로 생성할 수 있습니다.

// 2. 배열은 숫자를 사용하여 값에 접근할 수 있습니다. 이때 숫자는 값의 순서를 의미하며, 
// 이 순서를 인덱스(index), 그리고 배열안에 존재하는 값을 원소(elements)라고 부릅니다.
//  심지어 존재하지 않는 원소에도 접근이 가능합니다.

// 3.  배열은 가지고 있는 원소의 길이를 나타내는 length 프로퍼티를 가지고 있습니다. (문자열에서도 사용했었죠?)

// 4. 배열은 배열 안에 다른 배열을 포함할 수 있습니다. 이러한 배열을 다차원 배열이라고 합니다.


//다차원배열 예시
const arr2 = [
    [1, 2],
    [3, 4],
    [5, 6]
  ];
  console.log(arr2[0][0]);
  console.log(arr2[2][1]); // 행 >> 열

  const arr3 = [
    [
      [1, 2],
      [3, 4]
    ],
    [
      [5, 6, 0],
      [7, 8]
    ]
  ];
  console.log(arr3[0][1][0]);
  console.log(arr3[1][0][1]);   // 배열요소>> 행 >> 열(배열 순서)

// 1. push()와 pop()

// push() 메소드는 배열의 끝에 요소를 추가하고, pop() 메소드는 배열의 마지막 요소를 제거합니다.

// 2. shift()와 unshift()

// shift() 메소드는 배열에서 첫 번째 요소를 !제거! 하고, 
//unshift() 메소드는 배열의 첫 번째 요소로 새로운 요소를 추가합니다

const myArray = ["사과", "바나나", "수박"];
myArray.shift();
console.log(myArray); //바나나 수박
myArray.unshift("오이", "배");
console.log(myArray); //오이 배 바나나 수박

// 3. splice() 메소드는 배열의 요소를 추가, 제거 또는 교체합니다.
// 메소드는 3개의 전달인자를 받습니다. 첫 번째  인자는 삭제나 추가를 시작할 인덱스입니다. 
// 두 번째 인자는 삭제할 요소의 개수입니다. 세 번째 인자부터는 추가할 요소들입니다. 
// 추가할 요소가 없다면 생략할 수 있으며 이때는 요소를 삭제만 하게됩니다.

const testarry = ["sp", "da", "스플", "레시"];
testarry.splice(1, 0, 3, "추가");  //순서, 삭제할 개수, 3번째부터 추가할 요소들
console.log(testarry);


// 4. slice() 메소드는 배열에서 요소들을 추출하여 새로운 배열로 반환하는 메서드입니다.
// 메소드는 2개의 전달인자를 받습니다. 첫 번째 인자는 추출을 시작할 인덱스입니다. 
// 두 번째 인자는 추출을 끝낼 인덱스입니다. 추출할 요소는 첫 번째 인자에서 시작하여, 
// 두 번째 인자에서 바로 이전 요소까지입니다. 두 번째 인자는 생략 가능하며, 생략하거나 
// 배열의 길이보다 큰 값을 전달하면 배열의 끝까지 추출합니다.


const slicearray = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", ];
console.log(slicearray.slice(1, 4)); 
console.log(slicearray.slice()); 
console.log(slicearray.slice(0, 10));


// 5. sort() 메소드는 배열의 요소를 정렬하는데 사용됩니다.
//  메소드를 호출하면 배열을 변경하며, 정렬된 배열을 반환합니다.

const avengers = ['아이언맨', '스파이더맨', '헐크', '토르'];
console.log(avengers.sort());

//숫자의 경우 유니코드 포인트의 순서대로 변환하기 때문에 원하는 정렬이 어려움 
const num3 = [13, 9, 10];

num3.sort(function (a, b) {
  console.log(`a: ${a}` , `b: ${b}`);
  return a - b;
});

const 숫자배열 = [71,600,1879,54,42,87,900,122]
function 바보상자(a , b) {
  return a - b;
}

숫자배열.sort(바보상자);

console.log(숫자배열);
/**
"a: 9"
"b: 13" // a - b는 음수임으로 a를 앞으로 => [9, 13, 10]

"a: 10"
"b: 9" // a - b는 양수임으로 b를 앞으로 => [9, 13, 10]

"a: 10"
"b: 13" // a - b는 음수임으로 a를 앞으로 => [9, 10, 13]

"a: 10"
"b: 9" // a - b 는 양수임으로 b를 앞으로 => [9, 10, 13]
*/

// forEach() 메소드는 배열의 각 요소에 대해 주어진 함수를 실행합니다. 
// 이 때, 함수는 인자로 배열 요소, 인덱스를 받습니다. 
// forEach() 메소드는 배열의 요소를 순환하면서 해당 요소를 함수로 전달하고, 
// 이 함수가 각 요소에 대해 실행됩니다.

const ea = ["1번", "2번", "3번"];
ea.forEach(function(이름, 순서) {    //이름에 들어갈 값 = ["1번", "2번", "3번"]
  console.log(`${이름} ${순서+1}`) ;
  ea[순서] = 순서;  // 순서에 들어갈 값 지정 []로 각 index인 0 1 2 가들어감 배열변경됨
})
console.log(ea)

// map() 메소드는 배열의 각 요소에 대해 주어진 함수를 실행하고, 
// 그 결과를 새로운 배열로 반환합니다.
const arr = [1, 2, 3]; 
const newArr = arr.map(function(숫자, 뭐지) { // 새로운 배열 반환
  return 숫자 * 뭐지;
});

console.log(newArr);